<theme-button>
   <button class="theme-toggle" aria-label="Toggle Theme">ðŸ’¡</button>
</theme-button>

<script is:inline>


class ThemeButton extends HTMLElement {
 constructor()
 {
  super();
  const button = this.querySelector('.theme-toggle');
   if (button)
   {
        button.addEventListener('click', () =>
        {
           const currentTheme = theme.getTheme();
           if(currentTheme == "light")
           {
             theme.setTheme("dark");
           }
           else if(currentTheme == "dark")
           {
              theme.setTheme("light");
           }
           else
           {
             const newTheme = matchMedia('(prefers-color-scheme: light)').matches ? 'dark' : 'light';
              theme.setTheme(newTheme);
           }
           this.updateSelectedTheme();

        });
      document.addEventListener("theme-changed", (event) => {
        this.updateSelectedTheme(event.detail.theme);
      });
    }
  }
    updateSelectedTheme(newTheme = theme.getTheme())
    {
      this.querySelector(".theme-toggle").value = newTheme;
    }

}
  /*
  if (!customElements.get("theme-selector")) {
    customElements.define(
      "theme-selector",
      class extends HTMLElement {
        connectedCallback() {
          this.querySelector("select").onchange = (event) =>
            theme.setTheme(event.target.value);
          this.setAttribute("aria-label", "Select Theme");
          this.updateSelectedTheme();

          document.addEventListener("theme-changed", (event) => {
            this.updateSelectedTheme(event.detail.theme);
          });
        }

        updateSelectedTheme(newTheme = theme.getTheme()) {
          this.querySelector("select").value = newTheme;
        }
      }
    );

  }*/
 customElements.define('theme-button', ThemeButton);
</script>


<style>
.theme-toggle {
  background-color: var(--tertiary-background);
}
</style>
