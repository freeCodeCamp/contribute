<starlight-theme-button>
  <button class="theme-toggle">ðŸ’¡</button>
</starlight-theme-button>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  StarlightThemeProvider.updatePickers();
</script>

<script>
  type CustomTheme = 'auto' | 'dark' | 'light';

  class StarlightThemeButton extends HTMLElement {
    /** Key in `localStorage` to store color theme preference at. */
    #key = 'starlight-theme';

    constructor() {
      super();
      this.#onThemeChange(this.#loadTheme());
      const button = this.querySelector('.theme-toggle');
      if (button) {
        button.addEventListener('click', (e) => {
          const theme = localStorage.getItem(this.#key);
          const newTheme = theme === 'dark' ? 'light' : 'dark';
          if (e.currentTarget instanceof HTMLButtonElement) {
            this.#onThemeChange(this.#parseTheme(newTheme));
          }
        });
      }
    }

    /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
    #parseTheme(theme: unknown): CustomTheme {
      if (theme === 'auto' || theme === 'dark' || theme === 'light') {
        return theme;
      } else {
        return 'auto';
      }
    }

    /** Get the preferred system color scheme. */
    #getPreferredColorScheme(): CustomTheme {
      return matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
    }

    /** Update select menu UI, document theme, and local storage state. */
    #onThemeChange(theme: CustomTheme): void {
      //StarlightThemeProvider.updatePickers(theme);
      document.documentElement.dataset.theme =
        theme === 'auto' ? this.#getPreferredColorScheme() : theme;
      this.#storeTheme(theme);
    }

    /** Store the userâ€™s preference in `localStorage`. */
    #storeTheme(theme: CustomTheme): void {
      if (typeof localStorage !== 'undefined') {
        if (theme === 'light' || theme === 'dark') {
          localStorage.setItem(this.#key, theme);
        } else {
          localStorage.removeItem(this.#key);
        }
      }
    }

    /** Load the userâ€™s preference from `localStorage`. */
    #loadTheme(): CustomTheme {
      const theme = typeof localStorage !== 'undefined' && localStorage.getItem(this.#key);
      return this.#parseTheme(theme);
    }
  }
  customElements.define('starlight-theme-button', StarlightThemeButton);
</script>
