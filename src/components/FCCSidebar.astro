---
import type { Props } from '@astrojs/starlight/props';
import MobileMenuFooter from '@astrojs/starlight/components/MobileMenuFooter.astro';
import { getEntry } from 'astro:content';

const entry = await getEntry('i18n', Astro.currentLocale ?? '');
const prefix = Astro.currentLocale == 'en' ? '' : Astro.currentLocale;
const { nested } = Astro.props;

import { content } from '../update-pagination';
---

<nav class:list={{ 'top-level': !nested }}>
  <ul>
    {
      content.map(
        ({ title, contents, addSeparator = false }) =>
          title && (
            <>
              {addSeparator && <hr />}
              <li>
                <strong>{entry?.data[title]}</strong>
                <ul>
                  {contents &&
                    contents.map(
                      item =>
                        item.title && (
                          <li>
                            <a
                              href={`${prefix}${item.href}`}
                              title={entry?.data[item.title]}
                              class={
                                Astro.url.pathname == item.href ? 'current' : ''
                              }
                              target={
                                item.external === undefined ? '_self' : '_blank'
                              }
                            >
                              {item.strong ? (
                                <strong>{entry?.data[item.title]}</strong>
                              ) : (
                                entry?.data[item.title]
                              )}
                            </a>
                          </li>
                        )
                    )}
                </ul>
              </li>
            </>
          )
      )
    }
  </ul>
</nav>
<div class='md:sl-hidden'>
  <MobileMenuFooter {...Astro.props} />
</div>

<style>
  ul {
    --sl-sidebar-item-padding-inline: 0.5rem;
    list-style: none;
    padding: 0;
  }

  li {
    overflow-wrap: anywhere;
  }

  ul ul li {
    margin-inline-start: var(--sl-sidebar-item-padding-inline);
    border-inline-start: 1px solid var(--sl-color-hairline-light);
    padding-inline-start: var(--sl-sidebar-item-padding-inline);
  }

  .large {
    font-size: var(--sl-text-lg);
    font-weight: 600;
    color: var(--sl-color-white);
  }

  .top-level > li + li {
    margin-top: 0.75rem;
  }

  summary {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.2em var(--sl-sidebar-item-padding-inline);
    line-height: 1.4;
    cursor: pointer;
    user-select: none;
  }
  summary::marker,
  summary::-webkit-details-marker {
    display: none;
  }

  .caret {
    transition: transform 0.2s ease-in-out;
    flex-shrink: 0;
  }
  :global([dir='rtl']) .caret {
    transform: rotateZ(180deg);
  }
  [open] > summary .caret {
    transform: rotateZ(90deg);
  }

  a {
    display: block;
    border-radius: 0.25rem;
    text-decoration: none;
    color: var(--sl-color-gray-2);
    padding: 0.3em var(--sl-sidebar-item-padding-inline);
    line-height: 1.4;
  }

  a:hover,
  a:focus {
    color: var(--sl-color-white);
  }

  .current,
  .current:hover,
  .current:focus {
    font-weight: 600;
    color: var(--sl-color-text-invert);
    background-color: var(--sl-color-text-accent);
  }

  a > *:not(:last-child),
  .group-label > *:not(:last-child) {
    margin-inline-end: 0.25em;
  }

  @media (min-width: 50rem) {
    .top-level > li + li {
      margin-top: 0.5rem;
    }
    .large {
      font-size: var(--sl-text-base);
    }
    a {
      font-size: var(--sl-text-sm);
    }
  }
</style>
